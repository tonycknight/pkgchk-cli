name: Build & Release

on:
  push:
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '**/*.md'
  pull_request:
  workflow_dispatch:

env:
  build-version-number: 0.1.${{ github.run_number }}  
  dotnet_version: 7.x
  nuget-package-name: pkgchk-cli.nupkg

jobs:
  sca:
    name: Check SCA
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ env.dotnet_version }}"
        
      - name: Check SCA
        run: |
          dotnet tool restore
          dotnet restore
          dotnet pkgchk -t -o ./report

      - name: SCA summary
        if: always()
        run: |          
          cat ./report/pkgchk.md >> $GITHUB_STEP_SUMMARY

  style-rules:
    name: Check style rules
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ env.dotnet_version }}"
        
      - name: Tool restore
        run: dotnet tool restore
      
      - name: App restore
        run: dotnet restore

      - name: Check style
        run: dotnet fantomas  ./ --check 
          
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ env.dotnet_version }}"
        
      - name: Tool restore
        run: dotnet tool restore
      
      - name: App restore
        run: dotnet restore

      - name: Run Tests
        run: dotnet test -c Debug --filter DisplayName!~IntegrationTests /p:CollectCoverage=true /p:CoverletOutput=./TestResults/coverage.info /p:CoverletOutputFormat=cobertura --logger "trx;LogFileName=test_results.trx" 
      
      - name: Unit test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: unit test results
          path: ${{ github.workspace }}/tests/pkgchk-cli.tests/TestResults/test_results.trx
          reporter: dotnet-trx
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Code coverage results
        uses: 5monkeys/cobertura-action@master
        with:
          path: ${{ github.workspace }}/tests/pkgchk-cli.tests/TestResults/coverage.info
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 1
          fail_below_threshold: true
          show_line: true
          show_branch: true
          show_missing: true
          show_class_names: true
          link_missing_lines: true
          report_name: code coverage results

      - name: Consolidate code coverage
        run: dotnet reportgenerator -reports:./tests/**/coverage.info -targetdir:./reports/codecoverage -reporttypes:Html

      - name: Archive Code coverage
        uses: actions/upload-artifact@v3
        with:
          name: codecoverage
          path: ./reports/codecoverage/*.*

  integration-tests:
    name: Integration Tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ env.dotnet_version }}"
        
      - name: Tool restore
        run: dotnet tool restore
      
      - name: App restore
        run: dotnet restore

      - name: Run Tests
        run: dotnet test -c Release --filter DisplayName~IntegrationTests --logger "trx;LogFileName=test_results.trx" 

      - name: Integration test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: integration test results - ${{ matrix.os }}
          path: ${{ github.workspace }}/tests/pkgchk-cli.tests/TestResults/test_results.trx
          reporter: dotnet-trx
          path-replace-backslashes: true
          token: ${{ secrets.GITHUB_TOKEN }}          
  
  nuget-package:
    name: Nuget packaging
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ env.dotnet_version }}"
          
      - name: Tool restore
        run: dotnet tool restore
      
      - name: App restore
        run: dotnet restore
        
      - name: Build package for Preview
        if: ${{ github.ref != 'refs/heads/main'}}
        run: dotnet pack -c Release -o ./package/ -p:PackageVersion=${{ env.build-version-number }}-preview -p:Version=${{ env.build-version-number }}-preview
      
      - name: Build package for Release
        if: ${{ github.ref == 'refs/heads/main'}}
        run: dotnet pack -c Release -o ./package/ -p:PackageVersion=${{ env.build-version-number }} -p:Version=${{ env.build-version-number }}

      - name: Archive tool nupkg
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.nuget-package-name }}
          path: ./package/*.nupkg
        

  nuget-release:
    name: Push to Nuget
    runs-on: ubuntu-latest
    needs:   [ sca, style-rules, unit-tests, integration-tests, nuget-package ]
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "${{ env.dotnet_version }}"
          
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.nuget-package-name }}
          path: ${{ github.workspace }}/artifacts      

      - name: Push nuget package
        run: dotnet nuget push "artifacts/*.nupkg"  --api-key ${{ secrets.NUGET_PAT }} --source "nuget.org"

  gh-release:
    name: Github release
    runs-on: ubuntu-latest
    needs: [ nuget-release ]    
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' 

    steps:    
      - uses: actions/checkout@v3

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          #token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.build-version-number }}
          prerelease: true
          generateReleaseNotes: true